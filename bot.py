
import asyncio
import datetime
import os
import sys
import logging

# aiogram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç aiohttp, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º SSL
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not API_TOKEN or not CHAT_ID:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º aiohttp-—Å–µ—Å—Å–∏—é —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º SSL
try:
    connector = aiohttp.TCPConnector(ssl=False)
    session = aiohttp.ClientSession(connector=connector)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è aiohttp-—Å–µ—Å—Å–∏–∏: {e}")
    sys.exit(1)

bot = Bot(token=API_TOKEN, session=session)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"))

mood_kb = ReplyKeyboardMarkup(resize_keyboard=True)
mood_kb.add("–û—Ç–ª–∏—á–Ω–æ üíØ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ üòä")
mood_kb.add("–¢–∞–∫ —Å–µ–±–µ üòï", "–ü–ª–æ—Ö–æ üòû")

training_kb = ReplyKeyboardMarkup(resize_keyboard=True)
training_kb.add("–í—Å—ë –ø–æ–Ω—è–ª, –ø–æ–µ—Ö–∞–ª–∏! üî•")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def send_reminder():
    await bot.send_message(
        chat_id=CHAT_ID,
        text="–ü—Ä–∏–≤–µ—Ç, Roos! –ó–∞–≤—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ üí™ –ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è! ü•óüò¥"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç, Roos! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç RoosFitCoach üí™ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        reply_markup=start_kb
    )

@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def handle_start_training(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è —á—É–≤—Å—Ç–≤—É–µ—à—å, Roos?", reply_markup=mood_kb)

@dp.message_handler(lambda message: message.text in ["–û—Ç–ª–∏—á–Ω–æ üíØ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ üòä", "–¢–∞–∫ —Å–µ–±–µ üòï", "–ü–ª–æ—Ö–æ üòû"])
async def handle_mood(message: types.Message):
    mood = message.text
    if mood == "–ü–ª–æ—Ö–æ üòû":
        await message.answer("–ü–æ–Ω—è–ª —Ç–µ–±—è, –¥–∞–≤–∞–π —Å–µ–≥–æ–¥–Ω—è –æ—Ç–¥–æ—Ö–Ω—ë–º. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ! üßò")
    elif mood == "–¢–∞–∫ —Å–µ–±–µ üòï":
        await message.answer("–•–æ—Ä–æ—à–æ, —è –ø–æ–¥–±–µ—Ä—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. üí°", reply_markup=training_kb)
    else:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É, —á—Ç–æ —É –Ω–∞—Å –ø–æ –ø–ª–∞–Ω—É üî•", reply_markup=training_kb)

@dp.message_handler(lambda message: message.text == "–í—Å—ë –ø–æ–Ω—è–ª, –ø–æ–µ—Ö–∞–ª–∏! üî•")
async def handle_go_training(message: types.Message):
    await message.answer(
        "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (Full Body)\n\n"
        "1. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è ‚Äî https://youtu.be/aclHkVaku9U\n"
        "2. –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è ‚Äî https://youtu.be/qEwKCR5JCog\n"
        "3. –°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ ‚Äî https://youtu.be/ytGaGIn3SjE\n"
        "4. –ü–æ–¥—ä—ë–º –Ω–∞ –±–∏—Ü–µ–ø—Å ‚Äî https://youtu.be/ykJmrZ5v0Oo\n"
        "5. –ü–ª–∞–Ω–∫–∞ 60 —Å–µ–∫ ‚Äî https://youtu.be/pSHjTRCQxIw\n\n"
        "–ü–æ–µ—Ö–∞–ª–∏! üèãÔ∏è"
    )

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler.add_job(send_reminder, 'cron', hour=21, minute=0)
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(session.close())
