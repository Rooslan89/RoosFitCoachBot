from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import datetime
import os

API_TOKEN = os.getenv('BOT_TOKEN')  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHAT_ID = os.getenv('CHAT_ID')      # –¢–æ–∂–µ —Å–∞–º–æ–µ –¥–ª—è ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"))

mood_kb = ReplyKeyboardMarkup(resize_keyboard=True)
mood_kb.add("–û—Ç–ª–∏—á–Ω–æ üíØ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ üòä")
mood_kb.add("–¢–∞–∫ —Å–µ–±–µ üòï", "–ü–ª–æ—Ö–æ üòû")

training_kb = ReplyKeyboardMarkup(resize_keyboard=True)
training_kb.add("–í—Å—ë –ø–æ–Ω—è–ª, –ø–æ–µ—Ö–∞–ª–∏! üî•")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def send_reminder():
    if CHAT_ID:
        await bot.send_message(chat_id=CHAT_ID, text="–ü—Ä–∏–≤–µ—Ç, Roos! –ó–∞–≤—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ üí™ –ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è! ü•óüò¥")

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, Roos! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç RoosFitCoach üí™ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", reply_markup=start_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def ask_mood(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è —á—É–≤—Å—Ç–≤—É–µ—à—å, Roos?", reply_markup=mood_kb)

@dp.message_handler(lambda message: message.text in ["–û—Ç–ª–∏—á–Ω–æ üíØ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ üòä", "–¢–∞–∫ —Å–µ–±–µ üòï", "–ü–ª–æ—Ö–æ üòû"])
async def mood_response(message: types.Message):
    mood = message.text
    if mood == "–ü–ª–æ—Ö–æ üòû":
        await message.answer("–ü–æ–Ω—è–ª —Ç–µ–±—è, –¥–∞–≤–∞–π —Å–µ–≥–æ–¥–Ω—è –æ—Ç–¥–æ—Ö–Ω—ë–º. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ! üßò")
    elif mood == "–¢–∞–∫ —Å–µ–±–µ üòï":
        await message.answer("–•–æ—Ä–æ—à–æ, —è –ø–æ–¥–±–µ—Ä—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. üí°", reply_markup=training_kb)
    else:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É, —á—Ç–æ —É –Ω–∞—Å –ø–æ –ø–ª–∞–Ω—É üî•", reply_markup=training_kb)

@dp.message_handler(lambda message: message.text == "–í—Å—ë –ø–æ–Ω—è–ª, –ø–æ–µ—Ö–∞–ª–∏! üî•")
async def start_training(message: types.Message):
    await message.answer(
        "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (Full Body)\n\n"
        "1. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è ‚Äî https://youtu.be/aclHkVaku9U\n"
        "2. –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è ‚Äî https://youtu.be/qEwKCR5JCog\n"
        "3. –°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ ‚Äî https://youtu.be/ytGaGIn3SjE\n"
        "4. –ü–æ–¥—ä—ë–º –Ω–∞ –±–∏—Ü–µ–ø—Å ‚Äî https://youtu.be/ykJmrZ5v0Oo\n"
        "5. –ü–ª–∞–Ω–∫–∞ 60 —Å–µ–∫ ‚Äî https://youtu.be/pSHjTRCQxIw\n\n"
        "–ü–æ–µ—Ö–∞–ª–∏! üèãÔ∏è"
    )

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler.add_job(send_reminder, 'cron', hour=21, minute=0)

# –•—É–∫ –Ω–∞ –∑–∞–ø—É—Å–∫
async def on_startup(dispatcher):
    scheduler.start()
    print("RoosFitCoach –∑–∞–ø—É—â–µ–Ω! üí™")

# –•—É–∫ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def on_shutdown(dispatcher):
    await bot.session.close()
    print("RoosFitCoach –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
