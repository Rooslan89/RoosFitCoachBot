
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import datetime
import asyncio

API_TOKEN = '7966092558:AAEOocrIi0BXVVYQx2h-6IrwZOw7bZTeSZ4'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üèã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"))
main_kb.add(KeyboardButton("üì∏ –§–æ—Ç–æ/–í–µ—Å"), KeyboardButton("üõå –°–æ–Ω"))
main_kb.add(KeyboardButton("üçΩ –ü–∏—Ç–∞–Ω–∏–µ"))

# –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
def get_today_workout():
    day = datetime.datetime.today().weekday()
    workouts = {
        0: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1 ‚Äì –ù–æ–≥–∏ + –¥–µ–ª—å—Ç—ã + –ø—Ä–µ—Å—Å",
        1: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2 ‚Äì –°–ø–∏–Ω–∞ + —Ä—É–∫–∏",
        3: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3 ‚Äì –ù–æ–≥–∏ + —è–≥–æ–¥–∏—Ü—ã + –¥–µ–ª—å—Ç—ã",
        4: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 4 ‚Äì –ì—Ä—É–¥—å + —Ä—É–∫–∏ + –∫–æ—Ä–∞"
    }
    return workouts.get(day, "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ üßò")

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —è RoosFitCoach ü§ñ –ì–æ—Ç–æ–≤ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ?", reply_markup=main_kb)

@dp.message_handler(lambda message: message.text == "üèã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def show_workout(message: types.Message):
    workout = get_today_workout()
    await message.reply(f"üìÖ {workout}

–ù–∞–ø–∏—à–∏ '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")

@dp.message_handler(lambda message: message.text.lower() == "–ø–æ–¥—Ä–æ–±–Ω–µ–µ")
async def send_workout_detail(message: types.Message):
    await message.reply("–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:
1. –ñ–∏–º –Ω–æ–≥–∞–º–∏
2. –°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥
3. –í—ã–ø–∞–¥—ã
(–∏ —Ç.–¥.)

üìπ –í–∏–¥–µ–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

@dp.message_handler(lambda message: message.text == "üì∏ –§–æ—Ç–æ/–í–µ—Å")
async def input_photo_weight(message: types.Message):
    await message.reply("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤–µ—Å (–≤ –∫–≥):")

@dp.message_handler(lambda message: message.text == "üõå –°–æ–Ω")
async def input_sleep(message: types.Message):
    await message.reply("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∞–ª —Å–µ–≥–æ–¥–Ω—è?")

@dp.message_handler(lambda message: message.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress(message: types.Message):
    await message.reply("üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ.")

@dp.message_handler(lambda message: message.text == "üçΩ –ü–∏—Ç–∞–Ω–∏–µ")
async def nutrition(message: types.Message):
    await message.reply("üçé –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–æ–≤–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é:
‚Äì –ë–æ–ª—å—à–µ –±–µ–ª–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫
‚Äì –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –ø—Ä–∏—ë–º –ø–∏—â–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
